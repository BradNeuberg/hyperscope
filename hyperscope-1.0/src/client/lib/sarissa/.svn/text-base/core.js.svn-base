/** * ==================================================================== * About * ==================================================================== * Sarissa is an ECMAScript library acting as a cross-browser wrapper for native XML APIs. * The library supports Gecko based browsers like Mozilla and Firefox, * Internet Explorer (5.5+ with MSXML3.0+), Konqueror, Safari and a little of Opera * @version 0.9.7 * @author: Manos Batsis, mailto: mbatsis at users full stop sourceforge full stop net * ==================================================================== * Licence * ==================================================================== * Sarissa is free software distributed under the GNU GPL version 2 (see <a href="gpl.txt">gpl.txt</a>) or higher,  * GNU LGPL version 2.1 (see <a href="lgpl.txt">lgpl.txt</a>) or higher and Apache Software License 2.0 or higher  * (see <a href="asl.txt">asl.txt</a>). This means you can choose one of the three and use that if you like. If  * you make modifications under the ASL, i would appreciate it if you submitted those. * In case your copy of Sarissa does not include the license texts, you may find * them online in various formats at <a href="http://www.gnu.org">http://www.gnu.org</a> and  * <a href="http://www.apache.org">http://www.apache.org</a>. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  */dojo.provide("sarissa.core");/** * <p>Sarissa is a utility class. Provides "static" methods for DOMDocument and  * XMLHTTP objects, DOM Node serializatrion to XML strings and other goodies.</p> * @constructor */function Sarissa(){};Sarissa.PARSED_OK = "Document contains no parsing errors";Sarissa.PARSED_EMPTY = "Document is empty"Sarissa.PARSED_UNKNOWN_ERROR = "Not well-formed or other error";var _sarissa_iNsCounter = 0;var _SARISSA_IEPREFIX4XSLPARAM = "";var _SARISSA_HAS_DOM_IMPLEMENTATION = document.implementation && true;var _SARISSA_HAS_DOM_CREATE_DOCUMENT = _SARISSA_HAS_DOM_IMPLEMENTATION && document.implementation.createDocument;var _SARISSA_HAS_DOM_FEATURE = _SARISSA_HAS_DOM_IMPLEMENTATION && document.implementation.hasFeature;var _SARISSA_IS_MOZ = _SARISSA_HAS_DOM_CREATE_DOCUMENT && _SARISSA_HAS_DOM_FEATURE;var _SARISSA_IS_SAFARI = (navigator.userAgent && navigator.vendor && (navigator.userAgent.toLowerCase().indexOf("applewebkit") != -1 || navigator.vendor.indexOf("Apple") != -1));var _SARISSA_IS_IE = document.all && window.ActiveXObject && navigator.userAgent.toLowerCase().indexOf("msie") > -1  && navigator.userAgent.toLowerCase().indexOf("opera") == -1;if(window && (!window.Node || !window.Node.ELEMENT_NODE)){    window.Node = {ELEMENT_NODE: 1, ATTRIBUTE_NODE: 2, TEXT_NODE: 3, CDATA_SECTION_NODE: 4, ENTITY_REFERENCE_NODE: 5,  ENTITY_NODE: 6, PROCESSING_INSTRUCTION_NODE: 7, COMMENT_NODE: 8, DOCUMENT_NODE: 9, DOCUMENT_TYPE_NODE: 10, DOCUMENT_FRAGMENT_NODE: 11, NOTATION_NODE: 12};};// IE initializationif(_SARISSA_IS_IE){    // for XSLT parameter names, prefix needed by IE    _SARISSA_IEPREFIX4XSLPARAM = "xsl:";    // used to store the most recent ProgID available out of the above    var _SARISSA_DOM_PROGID = "";    var _SARISSA_XMLHTTP_PROGID = "";    var _SARISSA_DOM_XMLWRITER = "";    /**     * Called when the Sarissa_xx.js file is parsed, to pick most recent     * ProgIDs for IE, then gets destroyed.     * @private     * @param idList an array of MSXML PROGIDs from which the most recent will be picked for a given object     * @param enabledList an array of arrays where each array has two items; the index of the PROGID for which a certain feature is enabled     */    Sarissa.pickRecentProgID = function (idList){        // found progID flag        var bFound = false;        for(var i=0; i < idList.length && !bFound; i++){            try{                var oDoc = new ActiveXObject(idList[i]);                o2Store = idList[i];                bFound = true;            }catch (objException){                // trap; try next progID            };        };        if (!bFound)            throw "Could not retreive a valid progID of Class: " + idList[idList.length-1]+". (original exception: "+e+")";        idList = null;        return o2Store;    };    // pick best available MSXML progIDs    _SARISSA_DOM_PROGID = null;    _SARISSA_THREADEDDOM_PROGID = null;    _SARISSA_XSLTEMPLATE_PROGID = null;    _SARISSA_XMLHTTP_PROGID = null;    if(!window.XMLHttpRequest){                 /**         * Emulate XMLHttpRequest         * @constructor         */        XMLHttpRequest = function() {            if(!_SARISSA_XMLHTTP_PROGID){                _SARISSA_XMLHTTP_PROGID = Sarissa.pickRecentProgID(["Msxml2.XMLHTTP.5.0", "Msxml2.XMLHTTP.4.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"]);            };            return new ActiveXObject(_SARISSA_XMLHTTP_PROGID);        };    };    // we dont need this anymore    //============================================    // Factory methods (IE)    //============================================    // see non-IE version    Sarissa.getDomDocument = function(sUri, sName){        if(!_SARISSA_DOM_PROGID){            _SARISSA_DOM_PROGID = Sarissa.pickRecentProgID(["Msxml2.DOMDocument.5.0", "Msxml2.DOMDocument.4.0", "Msxml2.DOMDocument.3.0", "MSXML2.DOMDocument", "MSXML.DOMDocument", "Microsoft.XMLDOM"]);        };        var oDoc = new ActiveXObject(_SARISSA_DOM_PROGID);        // if a root tag name was provided, we need to load it in the DOM object        if (sName){            // create an artifical namespace prefix             // or reuse existing prefix if applicable            var prefix = "";            if(sUri){                if(sName.indexOf(":") > 1){                    prefix = sName.substring(0, sName.indexOf(":"));                    sName = sName.substring(sName.indexOf(":")+1);                 }else{                    prefix = "a" + (_sarissa_iNsCounter++);                };            };            // use namespaces if a namespace URI exists            if(sUri){                oDoc.loadXML('<' + prefix+':'+sName + " xmlns:" + prefix + "=\"" + sUri + "\"" + " />");            } else {                oDoc.loadXML('<' + sName + " />");            };        };        return oDoc;    };    // see non-IE version       Sarissa.getParseErrorText = function (oDoc) {        var parseErrorText = Sarissa.PARSED_OK;        if(oDoc.parseError.errorCode != 0){            parseErrorText = "XML Parsing Error: " + oDoc.parseError.reason +                 "\nLocation: " + oDoc.parseError.url +                 "\nLine Number " + oDoc.parseError.line + ", Column " +                 oDoc.parseError.linepos +                 ":\n" + oDoc.parseError.srcText +                "\n";            for(var i = 0;  i < oDoc.parseError.linepos;i++){                parseErrorText += "-";            };            parseErrorText +=  "^\n";        }        else if(oDoc.documentElement == null){            parseErrorText = Sarissa.PARSED_EMPTY;        };        return parseErrorText;    };    // see non-IE version    Sarissa.setXpathNamespaces = function(oDoc, sNsSet) {        oDoc.setProperty("SelectionLanguage", "XPath");        oDoc.setProperty("SelectionNamespaces", sNsSet);    };       /**     * Basic implementation of Mozilla's XSLTProcessor for IE.      * Reuses the same XSLT stylesheet for multiple transforms     * @constructor     */    XSLTProcessor = function(){        if(!_SARISSA_XSLTEMPLATE_PROGID){            _SARISSA_XSLTEMPLATE_PROGID = Sarissa.pickRecentProgID(["Msxml2.XSLTemplate.5.0", "Msxml2.XSLTemplate.4.0", "MSXML2.XSLTemplate.3.0"]);        };        this.template = new ActiveXObject(_SARISSA_XSLTEMPLATE_PROGID);        this.processor = null;    };    /**     * Impoprts the given XSLT DOM and compiles it to a reusable transform     * @argument xslDoc The XSLT DOMDocument to import     */    XSLTProcessor.prototype.importStylesheet = function(xslDoc){        if(!_SARISSA_THREADEDDOM_PROGID){            _SARISSA_THREADEDDOM_PROGID = Sarissa.pickRecentProgID(["Msxml2.FreeThreadedDOMDocument.5.0", "MSXML2.FreeThreadedDOMDocument.4.0", "MSXML2.FreeThreadedDOMDocument.3.0"]);            _SARISSA_DOM_XMLWRITER = Sarissa.pickRecentProgID(["Msxml2.MXXMLWriter.5.0", "Msxml2.MXXMLWriter.4.0", "Msxml2.MXXMLWriter.3.0", "MSXML2.MXXMLWriter", "MSXML.MXXMLWriter", "Microsoft.XMLDOM"]);        };        // convert stylesheet to free threaded        var converted = new ActiveXObject(_SARISSA_THREADEDDOM_PROGID);        // make included stylesheets work if loaded from uri        if(xslDoc.url){            converted.async = false;            converted.load(xslDoc.url);        }        else{            converted.loadXML(xslDoc.xml);        }        this.template.stylesheet = converted;        this.processor = this.template.createProcessor();        // (re)set default param values        this.paramsSet = new Array();    };    /**     * Transform the given XML DOM     * @argument sourceDoc The XML DOMDocument to transform     * @return The transformation result as a DOM Document     */    XSLTProcessor.prototype.transformToDocument = function(sourceDoc){        this.processor.input = sourceDoc;        var outDoc = new ActiveXObject(_SARISSA_DOM_XMLWRITER);        this.processor.output = outDoc;         this.processor.transform();        var oDoc = new ActiveXObject(_SARISSA_DOM_PROGID);        oDoc.loadXML(outDoc.output+"");        return oDoc;        /*        this.processor.input = sourceDoc;        var outDoc = Sarissa.getDomDocument();        this.processor.output = outDoc;         this.processor.transform();        return outDoc;*/    };    /**     * Set global XSLT parameter of the imported stylesheet     * @argument nsURI The parameter namespace URI     * @argument name The parameter base name     * @argument value The new parameter value     */    XSLTProcessor.prototype.setParameter = function(nsURI, name, value){            /* nsURI is optional but cannot be null */        if(nsURI){            this.processor.addParameter(name, value, nsURI);        }else{            this.processor.addParameter(name, value);        };        /* update updated params for getParameter */        if(!this.paramsSet[""+nsURI]){            this.paramsSet[""+nsURI] = new Array();        };        this.paramsSet[""+nsURI][name] = value;    };    /**     * Gets a parameter if previously set by setParameter. Returns null     * otherwise     * @argument name The parameter base name     * @argument value The new parameter value     * @return The parameter value if reviously set by setParameter, null otherwise     */    XSLTProcessor.prototype.getParameter = function(nsURI, name){        nsURI = nsURI || "";        if(this.paramsSet[nsURI] && this.paramsSet[nsURI][name]){            return this.paramsSet[nsURI][name];        }else{            return null;        };    };}else{ /* end IE initialization, try to deal with real browsers now ;-) */    if(_SARISSA_HAS_DOM_CREATE_DOCUMENT){        /**         * <p>Ensures the document was loaded correctly, otherwise sets the         * parseError to -1 to indicate something went wrong. Internal use</p>         * @private         */        Sarissa.__handleLoad__ = function(oDoc){            Sarissa.__setReadyState__(oDoc, 4);        };        /**        * <p>Attached by an event handler to the load event. Internal use.</p>        * @private        */        _sarissa_XMLDocument_onload = function(){            Sarissa.__handleLoad__(this);        };        /**         * <p>Sets the readyState property of the given DOM Document object.         * Internal use.</p>         * @private         * @argument oDoc the DOM Document object to fire the         *          readystatechange event         * @argument iReadyState the number to change the readystate property to         */        Sarissa.__setReadyState__ = function(oDoc, iReadyState){            oDoc.readyState = iReadyState;            oDoc.readystate = iReadyState;            if (oDoc.onreadystatechange != null && typeof oDoc.onreadystatechange == "function")                oDoc.onreadystatechange();        };        Sarissa.getDomDocument = function(sUri, sName){            var oDoc = document.implementation.createDocument(sUri?sUri:null, sName?sName:null, null);            if(!oDoc.onreadystatechange){                            /**                * <p>Emulate IE's onreadystatechange attribute</p>                */                oDoc.onreadystatechange = null;            };            if(!oDoc.readyState){                /**                * <p>Emulates IE's readyState property, which always gives an integer from 0 to 4:</p>                * <ul><li>1 == LOADING,</li>                * <li>2 == LOADED,</li>                * <li>3 == INTERACTIVE,</li>                * <li>4 == COMPLETED</li></ul>                */                oDoc.readyState = 0;            };            oDoc.addEventListener("load", _sarissa_XMLDocument_onload, false);            return oDoc;        };        if(window.XMLDocument){                //if(window.XMLDocument) , now mainly for opera          }// TODO: check if the new document has content before trying to copynodes, check  for error handling in DOM 3 LS        else if(document.implementation && document.implementation.hasFeature && document.implementation.hasFeature('LS', '3.0')){                    /**            * <p>Factory method to obtain a new DOM Document object</p>            * @argument sUri the namespace of the root node (if any)            * @argument sUri the local name of the root node (if any)            * @returns a new DOM Document            */            Sarissa.getDomDocument = function(sUri, sName){                var oDoc = document.implementation.createDocument(sUri?sUri:null, sName?sName:null, null);                return oDoc;            };        }        else {            Sarissa.getDomDocument = function(sUri, sName){                var oDoc = document.implementation.createDocument(sUri?sUri:null, sName?sName:null, null);                // looks like safari does not create the root element for some unknown reason                if(oDoc && (sUri || sName) && !oDoc.documentElement){                    oDoc.appendChild(oDoc.createElementNS(sUri, sName));                };                return oDoc;            };        };    };//if(_SARISSA_HAS_DOM_CREATE_DOCUMENT)};//==========================================// Common stuff//==========================================if(!window.DOMParser){    if(_SARISSA_IS_SAFARI){        /*            * DOMParser is a utility class, used to construct DOMDocuments from XML strings        * @constructor            */            DOMParser = function() {            };        /**         * Construct a new DOM Document from the given XMLstring        * @param sXml the given XML string        * @param contentType the content type of the document the given string represents (one of text/xml, application/xml, application/xhtml+xml).         * @return a new DOM Document from the given XML string        */        DOMParser.prototype.parseFromString = function(sXml, contentType){            var xmlhttp = new XMLHttpRequest();            xmlhttp.open("GET", "data:text/xml;charset=utf-8," + encodeURIComponent(sXml), false);            xmlhttp.send(null);            return xmlhttp.responseXML;        };    }else if(Sarissa.getDomDocument && Sarissa.getDomDocument() && Sarissa.getDomDocument(null, "bar").xml){        DOMParser = function() {            };        DOMParser.prototype.parseFromString = function(sXml, contentType){            var doc = Sarissa.getDomDocument();            doc.loadXML(sXml);            return doc;        };	};}else if(_SARISSA_IS_MOZ){	/** 		Workaround for bug in Mozilla: https://bugzilla.mozilla.org/show_bug.cgi?id=323612		Brad Neuberg, bkn3@columbia.edu	*/
	
	DOMParser.prototype.__parseFromString = DOMParser.prototype.parseFromString;	DOMParser.prototype.parseFromString = function(sXml, contentType){		// create our hidden iframe		var iframe = document.createElement("iframe");		iframe.setAttribute("src", "about:blank");		iframe.style.position = "absolute";		iframe.style.top = "-1000px";		iframe.style.left = "-1000px";					// get the document body; some XHTML doctypes don't have		// a document.body		var body = document.body;		if(body == null || typeof body == "undefined"){			body = document.getElementsByTagName("body")[0];		}		if(body == null || typeof body == "undefined"){
			var msg = "Sarissa programming error: You must wait for the page "						+ "to fully load before using DOMParser.parseFromString "						+ "to fix Mozilla bug 323612; set an onload handler.";			throw msg;
		}		body.appendChild(iframe);					// get it's document object		var doc = iframe.contentDocument;				// save a reference to our string XML representation		doc.__Sarissa_domXml__ = sXml;				// execute our offending code		doc.location.href = 				'javascript:(function(){'				+ ' document.__Sarissa_domXml__ = new DOMParser().parseFromString(document.__Sarissa_domXml__, "text/xml"); '					+ '})()';					// get the results		var domXml = doc.__Sarissa_domXml__;				// clean up the iframe		iframe.parentNode.removeChild(iframe);				// copy over the custom new methods Sarissa		// adds to an XMLDocument to emulate IE's		// XPath behavior		for(var i in XMLDocument.prototype){			try{				if(typeof domXml[i] == "undefined"){
					domXml[i] = XMLDocument.prototype[i];				}			}catch(e){
				// ignore "Not Implemented" exceptions; we don't				// need properties that can't be copied since these				// aren't Sarissa functions
			}
		}					return domXml;
	};
};if(!window.document.importNode && _SARISSA_IS_IE){    try{        /**        * Implements importNode for the current window document in IE using innerHTML.        * Testing showed that DOM was multiple times slower than innerHTML for this,        * sorry folks. If you encounter trouble (who knows what IE does behind innerHTML)        * please gimme a call.        * @param oNode the Node to import        * @param bChildren whether to include the children of oNode        * @returns the imported node for further use        */        window.document.importNode = function(oNode, bChildren){            var importNode = document.createElement("div");            if(bChildren){                importNode.innerHTML = new XMLSerializer().serializeToString(oNode);            }else{                importNode.innerHTML = new XMLSerializer().serializeToString(oNode.cloneNode(false));            };            return importNode.getElementsByTagName("*")[0];        };        }catch(e){};};if(!window.Sarissa.getParseErrorText){    /**     * <p>Returns a human readable description of the parsing error. Usefull     * for debugging. Tip: append the returned error string in a &lt;pre&gt;     * element if you want to render it.</p>     * <p>Many thanks to Christian Stocker for the initial patch.</p>     * @argument oDoc The target DOM document     * @returns The parsing error description of the target Document in     *          human readable form (preformated text)     */    Sarissa.getParseErrorText = function (oDoc){        var parseErrorText = Sarissa.PARSED_OK;        if(!oDoc.documentElement){            parseErrorText = Sarissa.PARSED_EMPTY;        }        else if(oDoc.documentElement.tagName == "parsererror"){            parseErrorText = oDoc.documentElement.firstChild.data;            parseErrorText += "\n" +  oDoc.documentElement.firstChild.nextSibling.firstChild.data;        }        else if(oDoc.getElementsByTagName("parsererror").length > 0){            var parsererror = oDoc.getElementsByTagName("parsererror")[0];            parseErrorText = Sarissa.getText(parsererror, true)+"\n";        }else if(oDoc.parseError && oDoc.parseError.errorCode != 0){            parseErrorText = Sarissa.PARSED_UNKNOWN_ERROR;        };        return parseErrorText;    };};Sarissa.getText = function(oNode, deep){    var s = "";    var nodes = oNode.childNodes;    for(var i=0; i < nodes.length; i++){        var node = nodes[i];        var nodeType = node.nodeType;        if(nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE){            s += node.data;        }else if(deep == true                    && (nodeType == Node.ELEMENT_NODE                        || nodeType == Node.DOCUMENT_NODE                        || nodeType == Node.DOCUMENT_FRAGMENT_NODE)){            s += Sarissa.getText(node, true);        };    };    return s;};if(!window.XMLSerializer     && Sarissa.getDomDocument     && Sarissa.getDomDocument("","foo", null).xml){    /**     * Utility class to serialize DOM Node objects to XML strings     * @constructor     */    XMLSerializer = function(){};    /**     * Serialize the given DOM Node to an XML string     * @param oNode the DOM Node to serialize     */    XMLSerializer.prototype.serializeToString = function(oNode) {        return oNode.xml;    };};/** * strips tags from a markup string */Sarissa.stripTags = function (s) {    return s.replace(/<[^>]+>/g,"");};/** * <p>Deletes all child nodes of the given node</p> * @argument oNode the Node to empty */Sarissa.clearChildNodes = function(oNode) {    // need to check for firstChild due to opera 8 bug with hasChildNodes    while(oNode.firstChild){        oNode.removeChild(oNode.firstChild);    };};/** * <p> Copies the childNodes of nodeFrom to nodeTo</p> * <p> <b>Note:</b> The second object's original content is deleted before  * the copy operation, unless you supply a true third parameter</p> * @argument nodeFrom the Node to copy the childNodes from * @argument nodeTo the Node to copy the childNodes to * @argument bPreserveExisting whether to preserve the original content of nodeTo, default is false */Sarissa.copyChildNodes = function(nodeFrom, nodeTo, bPreserveExisting) {    if((!nodeFrom) || (!nodeTo)){        throw "Both source and destination nodes must be provided";    };    if(!bPreserveExisting){        Sarissa.clearChildNodes(nodeTo);    };    var ownerDoc = nodeTo.nodeType == Node.DOCUMENT_NODE ? nodeTo : nodeTo.ownerDocument;    var nodes = nodeFrom.childNodes;    if(/*(!_SARISSA_IS_IE) && */ownerDoc.importNode)  {        for(var i=0;i < nodes.length;i++) {            nodeTo.appendChild(ownerDoc.importNode(nodes[i], true));        };    }else{        for(var i=0;i < nodes.length;i++) {            nodeTo.appendChild(nodes[i].cloneNode(true));        };    };};/** * <p> Moves the childNodes of nodeFrom to nodeTo</p> * <p> <b>Note:</b> The second object's original content is deleted before  * the move operation, unless you supply a true third parameter</p> * @argument nodeFrom the Node to copy the childNodes from * @argument nodeTo the Node to copy the childNodes to * @argument bPreserveExisting whether to preserve the original content of nodeTo, default is */ Sarissa.moveChildNodes = function(nodeFrom, nodeTo, bPreserveExisting) {    if((!nodeFrom) || (!nodeTo)){        throw "Both source and destination nodes must be provided";    };    if(!bPreserveExisting){        Sarissa.clearChildNodes(nodeTo);    };    var nodes = nodeFrom.childNodes;    // if within the same doc, just move, else copy and delete    if(nodeFrom.ownerDocument == nodeTo.ownerDocument){        while(nodeFrom.firstChild){            nodeTo.appendChild(nodeFrom.firstChild);        };    }else{        var ownerDoc = nodeTo.nodeType == Node.DOCUMENT_NODE ? nodeTo : nodeTo.ownerDocument;        if(ownerDoc.importNode /*&& (!_SARISSA_IS_IE)*/) {           for(var i=0;i < nodes.length;i++) {               nodeTo.appendChild(ownerDoc.importNode(nodes[i], true));           };        }else{           for(var i=0;i < nodes.length;i++) {               nodeTo.appendChild(nodes[i].cloneNode(true));           };        };        Sarissa.clearChildNodes(nodeFrom);    };};/**  * <p>Serialize any object to an XML string. All properties are serialized using the property name * as the XML element name. Array elements are rendered as <code>array-item</code> elements,  * using their index/key as the value of the <code>key</code> attribute.</p> * @argument anyObject the object to serialize * @argument objectName a name for that object * @return the XML serializationj of the given object as a string */Sarissa.xmlize = function(anyObject, objectName, indentSpace){    indentSpace = indentSpace?indentSpace:'';    var s = indentSpace  + '<' + objectName + '>';    var isLeaf = false;    if(!(anyObject instanceof Object) || anyObject instanceof Number || anyObject instanceof String         || anyObject instanceof Boolean || anyObject instanceof Date){        s += Sarissa.escape(""+anyObject);        isLeaf = true;    }else{        s += "\n";        var itemKey = '';        var isArrayItem = anyObject instanceof Array;        for(var name in anyObject){            s += Sarissa.xmlize(anyObject[name], (isArrayItem?"array-item key=\""+name+"\"":name), indentSpace + "   ");        };        s += indentSpace;    };    return s += (objectName.indexOf(' ')!=-1?"</array-item>\n":"</" + objectName + ">\n");};/**  * Escape the given string chacters that correspond to the five predefined XML entities * @param sXml the string to escape */Sarissa.escape = function(sXml){    return sXml.replace(/&/g, "&amp;")        .replace(/</g, "&lt;")        .replace(/>/g, "&gt;")        .replace(/"/g, "&quot;")        .replace(/'/g, "&apos;");};/**  * Unescape the given string. This turns the occurences of the predefined XML  * entities to become the characters they represent correspond to the five predefined XML entities * @param sXml the string to unescape */Sarissa.unescape = function(sXml){    return sXml.replace(/&apos;/g,"'")        .replace(/&quot;/g,"\"")        .replace(/&gt;/g,">")        .replace(/&lt;/g,"<")        .replace(/&amp;/g,"&");};//   EOF